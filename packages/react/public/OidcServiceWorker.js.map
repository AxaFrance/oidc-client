{"version":3,"file":"OidcServiceWorker.js","sources":["../constants.ts","../utils/domains.ts","../utils/strings.ts","../utils/tokens.ts","../utils/serializeHeaders.ts","../utils/sleep.ts","../OidcServiceWorker.ts"],"sourcesContent":["const scriptFilename = 'OidcTrustedDomains.js'; /* global trustedDomains */\r\nconst acceptAnyDomainToken = '*';\r\n\r\ntype TokenType = {\r\n  readonly REFRESH_TOKEN: string;\r\n  readonly ACCESS_TOKEN: string;\r\n  readonly NONCE_TOKEN: string;\r\n  readonly CODE_VERIFIER: string;\r\n};\r\n\r\nconst TOKEN: TokenType = {\r\n  REFRESH_TOKEN: 'REFRESH_TOKEN_SECURED_BY_OIDC_SERVICE_WORKER',\r\n  ACCESS_TOKEN: 'ACCESS_TOKEN_SECURED_BY_OIDC_SERVICE_WORKER',\r\n  NONCE_TOKEN: 'NONCE_SECURED_BY_OIDC_SERVICE_WORKER',\r\n  CODE_VERIFIER: 'CODE_VERIFIER_SECURED_BY_OIDC_SERVICE_WORKER',\r\n};\r\n\r\ntype TokenRenewModeType = {\r\n  readonly access_token_or_id_token_invalid: string;\r\n  readonly access_token_invalid: string;\r\n  readonly id_token_invalid: string;\r\n};\r\n\r\nconst TokenRenewMode: TokenRenewModeType = {\r\n  access_token_or_id_token_invalid: 'access_token_or_id_token_invalid',\r\n  access_token_invalid: 'access_token_invalid',\r\n  id_token_invalid: 'id_token_invalid',\r\n};\r\n\r\nconst openidWellknownUrlEndWith = '/.well-known/openid-configuration';\r\n\r\nexport { scriptFilename, acceptAnyDomainToken, TOKEN, TokenRenewMode, openidWellknownUrlEndWith };\r\n","import { TrustedDomains } from './../types';\r\nimport {\r\n  acceptAnyDomainToken,\r\n  openidWellknownUrlEndWith,\r\n  scriptFilename,\r\n} from '../constants';\r\nimport { Database, Domain, OidcConfig } from '../types';\r\n\r\nfunction checkDomain(domains: Domain[], endpoint: string) {\r\n  if (!endpoint) {\r\n    return;\r\n  }\r\n\r\n  const domain = domains.find((domain) => {\r\n    let testable: RegExp;\r\n\r\n    if (typeof domain === 'string') {\r\n      testable = new RegExp(`^${domain}`);\r\n    } else {\r\n      testable = domain;\r\n    }\r\n\r\n    return testable.test?.(endpoint);\r\n  });\r\n  if (!domain) {\r\n    throw new Error(\r\n      'Domain ' +\r\n        endpoint +\r\n        ' is not trusted, please add domain in ' +\r\n        scriptFilename\r\n    );\r\n  }\r\n}\r\n\r\nconst getCurrentDatabaseDomain = (\r\n  database: Database,\r\n  url: string,\r\n  trustedDomains: TrustedDomains\r\n) => {\r\n  if (url.endsWith(openidWellknownUrlEndWith)) {\r\n    return null;\r\n  }\r\n  for (const [key, currentDatabase] of Object.entries<OidcConfig>(database)) {\r\n    const oidcServerConfiguration = currentDatabase.oidcServerConfiguration;\r\n\r\n    if (!oidcServerConfiguration) {\r\n      continue;\r\n    }\r\n\r\n    if (\r\n      oidcServerConfiguration.tokenEndpoint &&\r\n      url === oidcServerConfiguration.tokenEndpoint\r\n    ) {\r\n      continue;\r\n    }\r\n    if (\r\n      oidcServerConfiguration.revocationEndpoint &&\r\n      url === oidcServerConfiguration.revocationEndpoint\r\n    ) {\r\n      continue;\r\n    }\r\n\r\n    const domainsToSendTokens = oidcServerConfiguration.userInfoEndpoint\r\n      ? [oidcServerConfiguration.userInfoEndpoint, ...trustedDomains[key]]\r\n      : [...trustedDomains[key]];\r\n\r\n    let hasToSendToken = false;\r\n    if (domainsToSendTokens.find((f) => f === acceptAnyDomainToken)) {\r\n      hasToSendToken = true;\r\n    } else {\r\n      for (let i = 0; i < domainsToSendTokens.length; i++) {\r\n        let domain = domainsToSendTokens[i];\r\n\r\n        if (typeof domain === 'string') {\r\n          domain = new RegExp(`^${domain}`);\r\n        }\r\n\r\n        if (domain.test?.(url)) {\r\n          hasToSendToken = true;\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (hasToSendToken) {\r\n      if (!currentDatabase.tokens) {\r\n        return null;\r\n      }\r\n      return currentDatabase;\r\n    }\r\n  }\r\n  return null;\r\n};\r\n\r\nexport { checkDomain, getCurrentDatabaseDomain };\r\n","/**\r\n * Count occurances of letter in string\r\n * @param str\r\n * @param find\r\n * @returns\r\n */\r\nexport function countLetter(str: string, find: string) {\r\n  return str.split(find).length - 1;\r\n}\r\n","import { TOKEN, TokenRenewMode } from '../constants';\r\nimport { OidcConfig, OidcConfiguration, OidcServerConfiguration, Tokens } from '../types';\r\nimport { countLetter } from './strings';\r\n\r\nfunction parseJwt(token: string) {\r\n  return JSON.parse(\r\n    b64DecodeUnicode(token.split('.')[1].replace('-', '+').replace('_', '/'))\r\n  );\r\n}\r\nfunction b64DecodeUnicode(str: string) {\r\n  return decodeURIComponent(\r\n    Array.prototype.map\r\n      .call(\r\n        atob(str),\r\n        (c) => '%' + ('00' + c.charCodeAt(0).toString(16)).slice(-2)\r\n      )\r\n      .join('')\r\n  );\r\n}\r\n\r\nfunction computeTimeLeft(\r\n  refreshTimeBeforeTokensExpirationInSecond: number,\r\n  expiresAt: number\r\n) {\r\n  const currentTimeUnixSecond = new Date().getTime() / 1000;\r\n  return Math.round(\r\n    expiresAt -\r\n      refreshTimeBeforeTokensExpirationInSecond -\r\n      currentTimeUnixSecond\r\n  );\r\n}\r\n\r\nfunction isTokensValid(tokens: Tokens | null) {\r\n  if (!tokens) {\r\n    return false;\r\n  }\r\n  return computeTimeLeft(0, tokens.expiresAt) > 0;\r\n}\r\n\r\nconst extractTokenPayload = (token?: string) => {\r\n  try {\r\n    if (!token) {\r\n      return null;\r\n    }\r\n    if (countLetter(token, '.') === 2) {\r\n      return parseJwt(token);\r\n    } else {\r\n      return null;\r\n    }\r\n  } catch (e) {\r\n    console.warn(e);\r\n  }\r\n  return null;\r\n};\r\n\r\n// https://openid.net/specs/openid-connect-core-1_0.html#IDTokenValidation (excluding rules #1, #4, #5, #7, #8, #12, and #13 which did not apply).\r\n// https://github.com/openid/AppAuth-JS/issues/65\r\nconst isTokensOidcValid = (\r\n  tokens: Tokens,\r\n  nonce: string | null,\r\n  oidcServerConfiguration: OidcServerConfiguration\r\n): { isValid: boolean; reason: string } => {\r\n  if (tokens.idTokenPayload) {\r\n    const idTokenPayload = tokens.idTokenPayload;\r\n    // 2: The Issuer Identifier for the OpenID Provider (which is typically obtained during Discovery) MUST exactly match the value of the iss (issuer) Claim.\r\n    if (oidcServerConfiguration.issuer !== idTokenPayload.iss) {\r\n      return { isValid: false, reason: 'Issuer does not match' };\r\n    }\r\n    // 3: The Client MUST validate that the aud (audience) Claim contains its client_id value registered at the Issuer identified by the iss (issuer) Claim as an audience. The aud (audience) Claim MAY contain an array with more than one element. The ID Token MUST be rejected if the ID Token does not list the Client as a valid audience, or if it contains additional audiences not trusted by the Client.\r\n\r\n    // 6: If the ID Token is received via direct communication between the Client and the Token Endpoint (which it is in this flow), the TLS server validation MAY be used to validate the issuer in place of checking the token signature. The Client MUST validate the signature of all other ID Tokens according to JWS [JWS] using the algorithm specified in the JWT alg Header Parameter. The Client MUST use the keys provided by the Issuer.\r\n\r\n    // 9: The current time MUST be before the time represented by the exp Claim.\r\n    const currentTimeUnixSecond = new Date().getTime() / 1000;\r\n    if (idTokenPayload.exp && idTokenPayload.exp < currentTimeUnixSecond) {\r\n      return { isValid: false, reason: 'Token expired' };\r\n    }\r\n    // 10: The iat Claim can be used to reject tokens that were issued too far away from the current time, limiting the amount of time that nonces need to be stored to prevent attacks. The acceptable range is Client specific.\r\n    const timeInSevenDays = 60 * 60 * 24 * 7;\r\n    if (\r\n      idTokenPayload.iat &&\r\n      idTokenPayload.iat + timeInSevenDays < currentTimeUnixSecond\r\n    ) {\r\n      return { isValid: false, reason: 'Token is used from too long time' };\r\n    }\r\n    // 11: If a nonce value was sent in the Authentication Request, a nonce Claim MUST be present and its value checked to verify that it is the same value as the one that was sent in the Authentication Request. The Client SHOULD check the nonce value for replay attacks. The precise method for detecting replay attacks is Client specific.\r\n    if (idTokenPayload.nonce && idTokenPayload.nonce !== nonce) {\r\n      return { isValid: false, reason: 'Nonce does not match' };\r\n    }\r\n  }\r\n  return { isValid: true, reason: '' };\r\n};\r\n\r\nfunction hideTokens(currentDatabaseElement: OidcConfig) {\r\n  const configurationName = currentDatabaseElement.configurationName;\r\n  return (response: Response) => {\r\n    if (response.status !== 200) {\r\n      return response;\r\n    }\r\n    return response.json().then<Response>((tokens: Tokens) => {\r\n      if (!tokens.issued_at) {\r\n        const currentTimeUnixSecond = new Date().getTime() / 1000;\r\n        tokens.issued_at = currentTimeUnixSecond;\r\n      }\r\n\r\n      const accessTokenPayload = extractTokenPayload(tokens.access_token);\r\n      const secureTokens = {\r\n        ...tokens,\r\n        access_token: TOKEN.ACCESS_TOKEN + '_' + configurationName,\r\n        accessTokenPayload,\r\n      };\r\n      tokens.accessTokenPayload = accessTokenPayload;\r\n\r\n      let _idTokenPayload = null;\r\n      if (tokens.id_token) {\r\n        _idTokenPayload = extractTokenPayload(tokens.id_token);\r\n        tokens.idTokenPayload = { ..._idTokenPayload };\r\n        if (_idTokenPayload.nonce && currentDatabaseElement.nonce != null) {\r\n          const keyNonce =\r\n            TOKEN.NONCE_TOKEN + '_' + currentDatabaseElement.configurationName;\r\n          _idTokenPayload.nonce = keyNonce;\r\n        }\r\n        secureTokens.idTokenPayload = _idTokenPayload;\r\n      }\r\n      if (tokens.refresh_token) {\r\n        secureTokens.refresh_token =\r\n          TOKEN.REFRESH_TOKEN + '_' + configurationName;\r\n      }\r\n\r\n      const idTokenExpiresAt =\r\n        _idTokenPayload && _idTokenPayload.exp\r\n          ? _idTokenPayload.exp\r\n          : Number.MAX_VALUE;\r\n      const accessTokenExpiresAt =\r\n        accessTokenPayload && accessTokenPayload.exp\r\n          ? accessTokenPayload.exp\r\n          : tokens.issued_at + tokens.expires_in;\r\n\r\n      let expiresAt: number;\r\n      const tokenRenewMode = (\r\n        currentDatabaseElement.oidcConfiguration as OidcConfiguration\r\n      ).token_renew_mode;\r\n      if (tokenRenewMode === TokenRenewMode.access_token_invalid) {\r\n        expiresAt = accessTokenExpiresAt;\r\n      } else if (tokenRenewMode === TokenRenewMode.id_token_invalid) {\r\n        expiresAt = idTokenExpiresAt;\r\n      } else {\r\n        expiresAt =\r\n          idTokenExpiresAt < accessTokenExpiresAt\r\n            ? idTokenExpiresAt\r\n            : accessTokenExpiresAt;\r\n      }\r\n      secureTokens.expiresAt = expiresAt;\r\n\r\n      tokens.expiresAt = expiresAt;\r\n      const nonce = currentDatabaseElement.nonce\r\n        ? currentDatabaseElement.nonce.nonce\r\n        : null;\r\n      const { isValid, reason } = isTokensOidcValid(\r\n        tokens,\r\n        nonce,\r\n        currentDatabaseElement.oidcServerConfiguration as OidcServerConfiguration\r\n      ); //TODO: Type assertion, could be null.\r\n      if (!isValid) {\r\n        throw Error(`Tokens are not OpenID valid, reason: ${reason}`);\r\n      }\r\n\r\n      // When refresh_token is not rotated we reuse ald refresh_token\r\n      if (\r\n        currentDatabaseElement.tokens != null &&\r\n        'refresh_token' in currentDatabaseElement.tokens &&\r\n        !('refresh_token' in tokens)\r\n      ) {\r\n        const refreshToken = currentDatabaseElement.tokens.refresh_token;\r\n\r\n        currentDatabaseElement.tokens = {\r\n          ...tokens,\r\n          refresh_token: refreshToken,\r\n        };\r\n      } else {\r\n        currentDatabaseElement.tokens = tokens;\r\n      }\r\n\r\n      currentDatabaseElement.status = 'LOGGED_IN';\r\n      const body = JSON.stringify(secureTokens);\r\n      return new Response(body, response);\r\n    });\r\n  };\r\n}\r\n\r\nexport {\r\n  b64DecodeUnicode,\r\n  computeTimeLeft,\r\n  isTokensValid,\r\n  extractTokenPayload,\r\n  isTokensOidcValid,\r\n  hideTokens\r\n};\r\n","import { FetchHeaders } from '../types';\r\n\r\nfunction serializeHeaders(headers: Headers) {\r\n  const headersObj: Record<string, string> = {};\r\n  for (const key of (headers as FetchHeaders).keys()) {\r\n    if (headers.has(key)) {\r\n      headersObj[key] = headers.get(key) as string;\r\n    }\r\n  }\r\n  return headersObj;\r\n}\r\nexport {serializeHeaders};","const sleep = (ms: number) => new Promise((resolve) => setTimeout(resolve, ms));\r\nexport { sleep };\r\n","import { acceptAnyDomainToken, TOKEN, scriptFilename } from './constants';\r\nimport {\r\n  TrustedDomains,\r\n  Database,\r\n  OidcConfig,\r\n  OidcConfiguration,\r\n  MessageEventData,\r\n} from './types';\r\nimport {\r\n  checkDomain,\r\n  getCurrentDatabaseDomain,\r\n  hideTokens,\r\n  isTokensValid,\r\n  serializeHeaders,\r\n  sleep,\r\n} from './utils';\r\n\r\nconst _self = self as ServiceWorkerGlobalScope & typeof globalThis;\r\n\r\ndeclare let trustedDomains: TrustedDomains;\r\n\r\n_self.importScripts(scriptFilename);\r\n\r\nconst id = Math.round(new Date().getTime() / 1000).toString();\r\n\r\nconst keepAliveJsonFilename = 'OidcKeepAliveServiceWorker.json';\r\nconst handleInstall = (event: ExtendableEvent) => {\r\n  console.log('[OidcServiceWorker] service worker installed ' + id);\r\n  event.waitUntil(_self.skipWaiting());\r\n};\r\n\r\nconst handleActivate = (event: ExtendableEvent) => {\r\n  console.log('[OidcServiceWorker] service worker activated ' + id);\r\n  event.waitUntil(_self.clients.claim());\r\n};\r\n\r\nlet currentLoginCallbackConfigurationName: string | null = null;\r\nconst database: Database = {\r\n  default: {\r\n    configurationName: 'default',\r\n    tokens: null,\r\n    status: null,\r\n    state: null,\r\n    codeVerifier: null,\r\n    nonce: null,\r\n    oidcServerConfiguration: null,\r\n  },\r\n};\r\n\r\nconst getCurrentDatabasesTokenEndpoint = (database: Database, url: string) => {\r\n  const databases: OidcConfig[] = [];\r\n  for (const [, value] of Object.entries<OidcConfig>(database)) {\r\n    if (\r\n      value.oidcServerConfiguration != null &&\r\n      url.startsWith(value.oidcServerConfiguration.tokenEndpoint)\r\n    ) {\r\n      databases.push(value);\r\n    } else if (\r\n      value.oidcServerConfiguration != null &&\r\n      value.oidcServerConfiguration.revocationEndpoint &&\r\n      url.startsWith(value.oidcServerConfiguration.revocationEndpoint)\r\n    ) {\r\n      databases.push(value);\r\n    }\r\n  }\r\n  return databases;\r\n};\r\n\r\nconst keepAliveAsync = async (event: FetchEvent) => {\r\n  const originalRequest = event.request;\r\n  const isFromVanilla = originalRequest.headers.has('oidc-vanilla');\r\n  const init = { status: 200, statusText: 'oidc-service-worker' };\r\n  const response = new Response('{}', init);\r\n  if (!isFromVanilla) {\r\n    const originalRequestUrl = new URL(originalRequest.url);\r\n    const minSleepSeconds = Number(originalRequestUrl.searchParams.get('minSleepSeconds')) || 240;\r\n    for (let i = 0; i < minSleepSeconds; i++) {\r\n      await sleep(1000 + Math.floor(Math.random() * 1000));\r\n      const cache = await caches.open('oidc_dummy_cache');\r\n      await cache.put(event.request, response.clone());\r\n    }\r\n  }\r\n\r\n  return response;\r\n};\r\n\r\nconst handleFetch = async (event: FetchEvent) => {\r\n  const originalRequest = event.request;\r\n  const url = originalRequest.url;\r\n  if (originalRequest.url.includes(keepAliveJsonFilename)) {\r\n    event.respondWith(keepAliveAsync(event));\r\n    return;\r\n  }\r\n\r\n  const currentDatabaseForRequestAccessToken = getCurrentDatabaseDomain(\r\n    database,\r\n    originalRequest.url,\r\n    trustedDomains\r\n  );\r\n  if (\r\n    currentDatabaseForRequestAccessToken &&\r\n    currentDatabaseForRequestAccessToken.tokens &&\r\n    currentDatabaseForRequestAccessToken.tokens.access_token\r\n  ) {\r\n    while (\r\n      currentDatabaseForRequestAccessToken.tokens &&\r\n      !isTokensValid(currentDatabaseForRequestAccessToken.tokens)\r\n    ) {\r\n      await sleep(200);\r\n    }\r\n    const newRequest = new Request(originalRequest, {\r\n      headers: {\r\n        ...serializeHeaders(originalRequest.headers),\r\n        authorization:\r\n          'Bearer ' + currentDatabaseForRequestAccessToken.tokens.access_token,\r\n      },\r\n      mode: (\r\n        currentDatabaseForRequestAccessToken.oidcConfiguration as OidcConfiguration\r\n      ).service_worker_convert_all_requests_to_cors\r\n        ? 'cors'\r\n        : originalRequest.mode,\r\n    });\r\n\r\n    //@ts-ignore -- TODO: review, waitUntil takes a promise, this returns a void\r\n    event.waitUntil(event.respondWith(fetch(newRequest)));\r\n\r\n    return;\r\n  }\r\n\r\n  if (event.request.method !== 'POST') {\r\n    return;\r\n  }\r\n\r\n  let currentDatabase: OidcConfig | null = null;\r\n  const currentDatabases = getCurrentDatabasesTokenEndpoint(\r\n    database,\r\n    originalRequest.url\r\n  );\r\n  const numberDatabase = currentDatabases.length;\r\n  if (numberDatabase > 0) {\r\n    const maPromesse = new Promise<Response>((resolve, reject) => {\r\n      const clonedRequest = originalRequest.clone();\r\n      const response = clonedRequest.text().then((actualBody) => {\r\n        if (\r\n          actualBody.includes(TOKEN.REFRESH_TOKEN) ||\r\n          actualBody.includes(TOKEN.ACCESS_TOKEN)\r\n        ) {\r\n          let newBody = actualBody;\r\n          for (let i = 0; i < numberDatabase; i++) {\r\n            const currentDb = currentDatabases[i];\r\n\r\n            if (currentDb && currentDb.tokens != null) {\r\n              const keyRefreshToken =\r\n                TOKEN.REFRESH_TOKEN + '_' + currentDb.configurationName;\r\n              if (actualBody.includes(keyRefreshToken)) {\r\n                newBody = newBody.replace(\r\n                  keyRefreshToken,\r\n                  encodeURIComponent(currentDb.tokens.refresh_token as string)\r\n                );\r\n                currentDatabase = currentDb;\r\n                break;\r\n              }\r\n              const keyAccessToken =\r\n                TOKEN.ACCESS_TOKEN + '_' + currentDb.configurationName;\r\n              if (actualBody.includes(keyAccessToken)) {\r\n                newBody = newBody.replace(\r\n                  keyAccessToken,\r\n                  encodeURIComponent(currentDb.tokens.access_token)\r\n                );\r\n                currentDatabase = currentDb;\r\n                break;\r\n              }\r\n            }\r\n          }\r\n          const fetchPromise = fetch(originalRequest, {\r\n            body: newBody,\r\n            method: clonedRequest.method,\r\n            headers: {\r\n              ...serializeHeaders(originalRequest.headers),\r\n            },\r\n            mode: clonedRequest.mode,\r\n            cache: clonedRequest.cache,\r\n            redirect: clonedRequest.redirect,\r\n            referrer: clonedRequest.referrer,\r\n            credentials: clonedRequest.credentials,\r\n            integrity: clonedRequest.integrity,\r\n          });\r\n\r\n          if (\r\n            currentDatabase &&\r\n            currentDatabase.oidcServerConfiguration != null &&\r\n            currentDatabase.oidcServerConfiguration.revocationEndpoint &&\r\n            url.startsWith(\r\n              currentDatabase.oidcServerConfiguration.revocationEndpoint\r\n            )\r\n          ) {\r\n            return fetchPromise.then(async (response) => {\r\n              const text = await response.text();\r\n              return new Response(text, response);\r\n            });\r\n          }\r\n          return fetchPromise.then(hideTokens(currentDatabase as OidcConfig)); //todo type assertion to OidcConfig but could be null, NEEDS REVIEW\r\n        } else if (\r\n          actualBody.includes('code_verifier=') &&\r\n          currentLoginCallbackConfigurationName\r\n        ) {\r\n          currentDatabase = database[currentLoginCallbackConfigurationName];\r\n          currentLoginCallbackConfigurationName = null;\r\n          let newBody = actualBody;\r\n          if (currentDatabase && currentDatabase.codeVerifier != null) {\r\n            const keyCodeVerifier =\r\n              TOKEN.CODE_VERIFIER + '_' + currentDatabase.configurationName;\r\n            if (actualBody.includes(keyCodeVerifier)) {\r\n              newBody = newBody.replace(\r\n                keyCodeVerifier,\r\n                currentDatabase.codeVerifier\r\n              );\r\n            }\r\n          }\r\n\r\n          return fetch(originalRequest, {\r\n            body: newBody,\r\n            method: clonedRequest.method,\r\n            headers: {\r\n              ...serializeHeaders(originalRequest.headers),\r\n            },\r\n            mode: clonedRequest.mode,\r\n            cache: clonedRequest.cache,\r\n            redirect: clonedRequest.redirect,\r\n            referrer: clonedRequest.referrer,\r\n            credentials: clonedRequest.credentials,\r\n            integrity: clonedRequest.integrity,\r\n          }).then(hideTokens(currentDatabase));\r\n        }\r\n        return undefined;\r\n      });\r\n      response\r\n        .then((r) => {\r\n          if (r !== undefined) {\r\n            resolve(r);\r\n          } else {\r\n            console.log('success undefined');\r\n            reject(new Error('Response is undefined inside a success'));\r\n          }\r\n        })\r\n        .catch((err) => {\r\n          if (err !== undefined) {\r\n            reject(err);\r\n          } else {\r\n            console.log('error undefined');\r\n            reject(new Error('Response is undefined inside a error'));\r\n          }\r\n        });\r\n    });\r\n\r\n    //@ts-ignore -- TODO: review, waitUntil takes a promise, this returns a void\r\n    event.waitUntil(event.respondWith(maPromesse));\r\n  }\r\n};\r\n\r\nconst handleMessage = (event: ExtendableMessageEvent) => {\r\n  const port = event.ports[0];\r\n  const data = event.data as MessageEventData;\r\n  const configurationName = data.configurationName;\r\n  let currentDatabase = database[configurationName];\r\n\r\n  if (!currentDatabase) {\r\n    database[configurationName] = {\r\n      tokens: null,\r\n      state: null,\r\n      codeVerifier: null,\r\n      oidcServerConfiguration: null,\r\n      oidcConfiguration: undefined,\r\n      nonce: null,\r\n      status: null,\r\n      configurationName,\r\n    };\r\n    currentDatabase = database[configurationName];\r\n    if (!trustedDomains[configurationName]) {\r\n      trustedDomains[configurationName] = [];\r\n    }\r\n  }\r\n\r\n  switch (data.type) {\r\n    case 'clear':\r\n      currentDatabase.tokens = null;\r\n      currentDatabase.state = null;\r\n      currentDatabase.codeVerifier = null;\r\n      currentDatabase.status = data.data.status;\r\n      port.postMessage({ configurationName });\r\n      return;\r\n    case 'init': {\r\n      const oidcServerConfiguration = data.data.oidcServerConfiguration;\r\n      const domains = trustedDomains[configurationName];\r\n      if (!domains.find((f) => f === acceptAnyDomainToken)) {\r\n        [\r\n          oidcServerConfiguration.tokenEndpoint,\r\n          oidcServerConfiguration.revocationEndpoint,\r\n          oidcServerConfiguration.userInfoEndpoint,\r\n          oidcServerConfiguration.issuer,\r\n        ].forEach((url) => {\r\n          checkDomain(domains, url);\r\n        });\r\n      }\r\n      currentDatabase.oidcServerConfiguration = oidcServerConfiguration;\r\n      currentDatabase.oidcConfiguration = data.data.oidcConfiguration;\r\n      const where = data.data.where;\r\n      if (\r\n        where === 'loginCallbackAsync' ||\r\n        where === 'tryKeepExistingSessionAsync'\r\n      ) {\r\n        currentLoginCallbackConfigurationName = configurationName;\r\n      } else {\r\n        currentLoginCallbackConfigurationName = null;\r\n      }\r\n\r\n      if (!currentDatabase.tokens) {\r\n        port.postMessage({\r\n          tokens: null,\r\n          status: currentDatabase.status,\r\n          configurationName,\r\n        });\r\n      } else {\r\n        const tokens = {\r\n          ...currentDatabase.tokens,\r\n          access_token: TOKEN.ACCESS_TOKEN + '_' + configurationName,\r\n        };\r\n        if (tokens.refresh_token) {\r\n          tokens.refresh_token = TOKEN.REFRESH_TOKEN + '_' + configurationName;\r\n        }\r\n        if (\r\n          tokens.idTokenPayload &&\r\n          tokens.idTokenPayload.nonce &&\r\n          currentDatabase.nonce != null\r\n        ) {\r\n          tokens.idTokenPayload.nonce =\r\n            TOKEN.NONCE_TOKEN + '_' + configurationName;\r\n        }\r\n        port.postMessage({\r\n          tokens,\r\n          status: currentDatabase.status,\r\n          configurationName,\r\n        });\r\n      }\r\n      return;\r\n    }\r\n    case 'setState':\r\n      currentDatabase.state = data.data.state;\r\n      port.postMessage({ configurationName });\r\n      return;\r\n    case 'getState': {\r\n      const state = currentDatabase.state;\r\n      port.postMessage({ configurationName, state });\r\n      return;\r\n    }\r\n    case 'setCodeVerifier':\r\n      currentDatabase.codeVerifier = data.data.codeVerifier;\r\n      port.postMessage({ configurationName });\r\n      return;\r\n    case 'getCodeVerifier': {\r\n      port.postMessage({\r\n        configurationName,\r\n        codeVerifier: TOKEN.CODE_VERIFIER + '_' + configurationName,\r\n      });\r\n      return;\r\n    }\r\n    case 'setSessionState':\r\n      currentDatabase.sessionState = data.data.sessionState;\r\n      port.postMessage({ configurationName });\r\n      return;\r\n    case 'getSessionState': {\r\n      const sessionState = currentDatabase.sessionState;\r\n      port.postMessage({ configurationName, sessionState });\r\n      return;\r\n    }\r\n    case 'setNonce':\r\n      currentDatabase.nonce = data.data.nonce;\r\n      port.postMessage({ configurationName });\r\n      return;\r\n    default:\r\n      currentDatabase.items = { ...data.data };\r\n      port.postMessage({ configurationName });\r\n  }\r\n};\r\n\r\n_self.addEventListener('install', handleInstall);\r\n_self.addEventListener('activate', handleActivate);\r\n_self.addEventListener('fetch', handleFetch);\r\n_self.addEventListener('message', handleMessage);\r\n"],"names":["scriptFilename","acceptAnyDomainToken","TOKEN","TokenRenewMode","openidWellknownUrlEndWith","checkDomain","domains","endpoint","domain","testable","_a","getCurrentDatabaseDomain","database","url","trustedDomains","key","currentDatabase","oidcServerConfiguration","domainsToSendTokens","hasToSendToken","f","i","countLetter","str","find","parseJwt","token","b64DecodeUnicode","c","computeTimeLeft","refreshTimeBeforeTokensExpirationInSecond","expiresAt","currentTimeUnixSecond","isTokensValid","tokens","extractTokenPayload","e","isTokensOidcValid","nonce","idTokenPayload","timeInSevenDays","hideTokens","currentDatabaseElement","configurationName","response","accessTokenPayload","secureTokens","_idTokenPayload","keyNonce","idTokenExpiresAt","accessTokenExpiresAt","tokenRenewMode","isValid","reason","refreshToken","body","serializeHeaders","headers","headersObj","sleep","ms","resolve","_self","id","keepAliveJsonFilename","handleInstall","event","handleActivate","currentLoginCallbackConfigurationName","getCurrentDatabasesTokenEndpoint","databases","value","keepAliveAsync","originalRequest","isFromVanilla","init","originalRequestUrl","minSleepSeconds","handleFetch","currentDatabaseForRequestAccessToken","newRequest","currentDatabases","numberDatabase","maPromesse","reject","clonedRequest","actualBody","newBody","currentDb","keyRefreshToken","keyAccessToken","fetchPromise","text","keyCodeVerifier","r","err","handleMessage","port","data","where","state","sessionState"],"mappings":"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"}